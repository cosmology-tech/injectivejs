/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ExecuteMsg, Addr, GetActiveContractsResponse, ContractExecutionParams, GetContractResponse, GetContractsResponse, InstantiateMsg, QueryMsg } from "./Registry.types";
export interface RegistryReadOnlyInterface {
  contractAddress: string;
  getContract: ({
    contractAddress
  }: {
    contractAddress: Addr;
  }) => Promise<GetContractResponse>;
  getContracts: () => Promise<GetContractsResponse>;
  getActiveContracts: () => Promise<GetActiveContractsResponse>;
}
export class RegistryQueryClient implements RegistryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getContract = this.getContract.bind(this);
    this.getContracts = this.getContracts.bind(this);
    this.getActiveContracts = this.getActiveContracts.bind(this);
  }

  getContract = async ({
    contractAddress
  }: {
    contractAddress: Addr;
  }): Promise<GetContractResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_contract: {
        contract_address: contractAddress
      }
    });
  };
  getContracts = async (): Promise<GetContractsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_contracts: {}
    });
  };
  getActiveContracts = async (): Promise<GetActiveContractsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_active_contracts: {}
    });
  };
}
export interface RegistryInterface extends RegistryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  register: ({
    contractAddress,
    gasLimit,
    gasPrice,
    isExecutable
  }: {
    contractAddress: Addr;
    gasLimit: number;
    gasPrice: string;
    isExecutable: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  update: ({
    contractAddress,
    gasLimit,
    gasPrice
  }: {
    contractAddress: Addr;
    gasLimit: number;
    gasPrice: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  activate: ({
    contractAddress
  }: {
    contractAddress: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  deactivate: ({
    contractAddress
  }: {
    contractAddress: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class RegistryClient extends RegistryQueryClient implements RegistryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.register = this.register.bind(this);
    this.update = this.update.bind(this);
    this.activate = this.activate.bind(this);
    this.deactivate = this.deactivate.bind(this);
  }

  register = async ({
    contractAddress,
    gasLimit,
    gasPrice,
    isExecutable
  }: {
    contractAddress: Addr;
    gasLimit: number;
    gasPrice: string;
    isExecutable: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register: {
        contract_address: contractAddress,
        gas_limit: gasLimit,
        gas_price: gasPrice,
        is_executable: isExecutable
      }
    }, fee, memo, funds);
  };
  update = async ({
    contractAddress,
    gasLimit,
    gasPrice
  }: {
    contractAddress: Addr;
    gasLimit: number;
    gasPrice: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update: {
        contract_address: contractAddress,
        gas_limit: gasLimit,
        gas_price: gasPrice
      }
    }, fee, memo, funds);
  };
  activate = async ({
    contractAddress
  }: {
    contractAddress: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      activate: {
        contract_address: contractAddress
      }
    }, fee, memo, funds);
  };
  deactivate = async ({
    contractAddress
  }: {
    contractAddress: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deactivate: {
        contract_address: contractAddress
      }
    }, fee, memo, funds);
  };
}