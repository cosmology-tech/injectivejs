/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin, StdFee } from "@cosmjs/amino";
import { SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Addr, ContractConfigState, ExecuteMsg, FPDecimal, InstantiateMsg } from "./AtomicOrder.types";
export interface AtomicOrderInterface {
  contractAddress: string;
  sender: string;
  swapSpot: ({
    price,
    quantity
  }: {
    price: FPDecimal;
    quantity: FPDecimal;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class AtomicOrderClient implements AtomicOrderInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.swapSpot = this.swapSpot.bind(this);
  }

  swapSpot = async ({
    price,
    quantity
  }: {
    price: FPDecimal;
    quantity: FPDecimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      swap_spot: {
        price,
        quantity
      }
    }, fee, memo, funds);
  };
}