/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, GetActiveContractsResponse, GetContractResponse, GetContractsResponse } from "./Registry.types";
export interface RegistryReadOnlyInterface {
    contractAddress: string;
    getContract: ({ contractAddress }: {
        contractAddress: Addr;
    }) => Promise<GetContractResponse>;
    getContracts: () => Promise<GetContractsResponse>;
    getActiveContracts: () => Promise<GetActiveContractsResponse>;
}
export declare class RegistryQueryClient implements RegistryReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    getContract: ({ contractAddress }: {
        contractAddress: Addr;
    }) => Promise<GetContractResponse>;
    getContracts: () => Promise<GetContractsResponse>;
    getActiveContracts: () => Promise<GetActiveContractsResponse>;
}
export interface RegistryInterface extends RegistryReadOnlyInterface {
    contractAddress: string;
    sender: string;
    register: ({ contractAddress, gasLimit, gasPrice, isExecutable }: {
        contractAddress: Addr;
        gasLimit: number;
        gasPrice: string;
        isExecutable: boolean;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    update: ({ contractAddress, gasLimit, gasPrice }: {
        contractAddress: Addr;
        gasLimit: number;
        gasPrice: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    activate: ({ contractAddress }: {
        contractAddress: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    deactivate: ({ contractAddress }: {
        contractAddress: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class RegistryClient extends RegistryQueryClient implements RegistryInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    register: ({ contractAddress, gasLimit, gasPrice, isExecutable }: {
        contractAddress: Addr;
        gasLimit: number;
        gasPrice: string;
        isExecutable: boolean;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    update: ({ contractAddress, gasLimit, gasPrice }: {
        contractAddress: Addr;
        gasLimit: number;
        gasPrice: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    activate: ({ contractAddress }: {
        contractAddress: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    deactivate: ({ contractAddress }: {
        contractAddress: Addr;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
